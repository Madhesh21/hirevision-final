<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
        <style>
    body {
        font-family: "Segoe UI", Arial, sans-serif;
        background: linear-gradient(135deg, #eef2f3, #dfe9f3);
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        min-height: 100vh;
    }

    h1 {
        background: #004aad;
        color: white;
        width: 100%;
        text-align: center;
        padding: 15px 0;
        margin: 0 0 20px 0;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
    }

    #chat-container {
        background: white;
        width: 90%;
        max-width: 600px;
        height: 60vh;
        border-radius: 15px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        padding: 15px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
    }

    #messages div {
        padding: 10px;
        border-radius: 10px;
        margin: 8px 0;
        max-width: 80%;
        line-height: 1.4;
        word-wrap: break-word;
        animation: fadeIn 0.3s ease-in-out;
    }

    /* Bot message */
    #messages div strong:contains('Bot:') {
        color: #004aad;
    }

    /* User messages styling */
    #messages div:has(strong:contains('You:')) {
        background: #e6f0ff;
        align-self: flex-end;
    }

    /* Bot messages styling */
    #messages div:has(strong:contains('Bot:')) {
        background: #f4f6f8;
        align-self: flex-start;
    }

    #difficulty-selector, #answer-input, #start-container {
        margin-top: 20px;
        text-align: center;
    }

    button {
        background: #004aad;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 10px 18px;
        margin: 8px;
        cursor: pointer;
        font-size: 15px;
        transition: 0.3s;
    }

    button:hover {
        background: #00327d;
        transform: translateY(-2px);
    }

    input[type="text"] {
        width: 70%;
        padding: 10px;
        border-radius: 8px;
        border: 1px solid #ccc;
        font-size: 15px;
        outline: none;
    }

    input[type="text"]:focus {
        border-color: #004aad;
        box-shadow: 0 0 5px rgba(0,74,173,0.3);
    }

    #answer-input button {
        padding: 10px 20px;
    }

    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(5px); }
        to { opacity: 1; transform: translateY(0); }
    }

    @media (max-width: 600px) {
        #chat-container {
            height: 55vh;
            padding: 10px;
        }

        input[type="text"] {
            width: 65%;
        }
    }
</style>



    <title>AI Interview Bot</title>
</head>
<body>
    <h1>AI Interview Assistant</h1>
    
    <div id="chat-container">
        <div id="messages"></div>
    </div>

    <div id="difficulty-selector" style="display: none;">
        <h3>Select Difficulty Level:</h3>
        <button onclick="selectDifficulty('easy')">Easy</button>
        <button onclick="selectDifficulty('medium')">Medium</button>
        <button onclick="selectDifficulty('hard')">Hard</button>
    </div>

    <div id="answer-input" style="display: none;">
        <input type="text" id="userAnswer" placeholder="Type your answer here..." />
        <button onclick="submitAnswer()">Submit Answer</button>
    </div>

    <div id="start-container">
        <button onclick="startInterview()">Start Interview</button>
    </div>

    <script>
        let sessionId = null;
        let currentQuestion = 0;
        let difficulty = '';
        let userAnswers = [];

        function addMessage(text, sender) {
            const messagesDiv = document.getElementById('messages');
            const messageDiv = document.createElement('div');
            messageDiv.innerHTML = `<strong>${sender}:</strong> ${text}`;
            messageDiv.style.marginBottom = '10px';
            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        async function startInterview() {
            document.getElementById('start-container').style.display = 'none';
            addMessage('Welcome! Please select a difficulty level for your interview.', 'Bot');
            document.getElementById('difficulty-selector').style.display = 'block';
        }

        async function selectDifficulty(level) {
            difficulty = level;
            document.getElementById('difficulty-selector').style.display = 'none';
            addMessage(`You selected: ${level.toUpperCase()}`, 'You');
            addMessage('Starting your interview with 5 questions...', 'Bot');
            
            // Start asking questions
            await askNextQuestion();
        }

        async function askNextQuestion() {
            if (currentQuestion >= 5) {
                // Interview complete, evaluate
                await evaluateInterview();
                return;
            }

            try {
                const response = await fetch('/conversation', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        sessionId: sessionId,
                        message: `Ask interview question number ${currentQuestion + 1} of 5 at ${difficulty} difficulty level based on the resume.`,
                        action: 'ask_question',
                        difficulty: difficulty,
                        questionNumber: currentQuestion + 1
                    })
                });

                const question = await response.json();
                
                if (question.sessionId) {
                    sessionId = question.sessionId;
                }

                addMessage(question.question || question, 'Bot');
                document.getElementById('answer-input').style.display = 'block';
                
            } catch (error) {
                console.error('Error:', error);
                addMessage('Error getting question. Please try again.', 'Bot');
            }
        }

        async function submitAnswer() {
            const answer = document.getElementById('userAnswer').value.trim();
            
            if (!answer) {
                alert('Please provide an answer!');
                return;
            }

            addMessage(answer, 'You');
            document.getElementById('userAnswer').value = '';
            document.getElementById('answer-input').style.display = 'none';

            // Store answer
            userAnswers.push({
                question: currentQuestion + 1,
                answer: answer
            });

            currentQuestion++;
            
            // Ask next question or evaluate
            await askNextQuestion();
        }

        async function evaluateInterview() {
            addMessage('Interview complete! Evaluating your answers...', 'Bot');

            try {
                const response = await fetch('/conversation', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        sessionId: sessionId,
                        message: `Evaluate these ${difficulty} difficulty interview answers and provide a score out of 100 with detailed feedback: ${JSON.stringify(userAnswers)}`,
                        action: 'evaluate',
                        answers: userAnswers
                    })
                });

                const evaluation = await response.json();
                addMessage(evaluation.evaluation || evaluation, 'Bot');
                
                // Show restart button
                const messagesDiv = document.getElementById('messages');
                const restartBtn = document.createElement('button');
                restartBtn.textContent = 'Start New Interview';
                restartBtn.onclick = () => location.reload();
                restartBtn.style.marginTop = '20px';
                messagesDiv.appendChild(restartBtn);
                
            } catch (error) {
                console.error('Error:', error);
                addMessage('Error evaluating answers. Please try again.', 'Bot');
            }
        }
    </script>
</body>
</html> -->





<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: Arial, sans-serif;
            background: #f5f5f5;
            padding: 20px;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        h1 {
            color: #333;
            margin-bottom: 30px;
            text-align: center;
        }
        
        .upload-section {
            margin-bottom: 30px;
            padding: 20px;
            background: #f9f9f9;
            border-radius: 5px;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #555;
        }
        
        input[type="file"] {
            width: 100%;
            padding: 10px;
            border: 2px dashed #ddd;
            border-radius: 5px;
            cursor: pointer;
        }
        
        select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
        }
        
        button {
            padding: 12px 24px;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 10px;
        }
        
        button:hover {
            background: #0056b3;
        }
        
        button:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        
        .status {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            display: none;
        }
        
        .status.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .status.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .status.info {
            background: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }
        
        .interview-section {
            display: none;
        }
        
        .question-box {
            background: #e3f2fd;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
            border-left: 4px solid #2196f3;
        }
        
        .question-number {
            font-weight: bold;
            color: #1976d2;
            margin-bottom: 10px;
        }
        
        .question-text {
            font-size: 16px;
            line-height: 1.6;
            color: #333;
        }
        
        textarea {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
            resize: vertical;
            min-height: 120px;
            font-family: Arial, sans-serif;
        }
        
        .button-group {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }
        
        .evaluation-section {
            display: none;
            margin-top: 30px;
            padding: 20px;
            background: #f0f7ff;
            border-radius: 5px;
        }
        
        .evaluation-content {
            white-space: pre-wrap;
            line-height: 1.8;
            color: #333;
        }
        
        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }
        
        .progress {
            text-align: center;
            margin: 20px 0;
            font-size: 18px;
            color: #555;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1><%= title %></h1>
        
        <!-- Upload Section -->
        <div class="upload-section" id="uploadSection">
            <h2>Step 1: Upload Your Resume</h2>
            <div class="form-group">
                <label>Select PDF Resume:</label>
                <input type="file" id="pdfFile" accept=".pdf">
            </div>
            
            <div class="form-group">
                <label>Select Difficulty:</label>
                <select id="difficulty">
                    <option value="easy">Easy</option>
                    <option value="medium" selected>Medium</option>
                    <option value="hard">Hard</option>
                </select>
            </div>
            
            <button id="uploadBtn">Upload & Start Interview</button>
            <div class="status" id="uploadStatus"></div>
        </div>
        
        <!-- Interview Section -->
        <div class="interview-section" id="interviewSection">
            <h2>Interview Questions</h2>
            <div class="progress" id="progress">Question 1 of 5</div>
            
            <div class="question-box">
                <div class="question-number" id="questionNumber">Question 1:</div>
                <div class="question-text" id="questionText">Loading question...</div>
            </div>
            
            <div class="form-group">
                <label>Your Answer:</label>
                <textarea id="answerInput" placeholder="Type your answer here..."></textarea>
            </div>
            
            <div class="button-group">
                <button id="submitAnswerBtn">Submit Answer</button>
                <button id="finishBtn" style="display:none; background:#28a745;">Finish Interview</button>
            </div>
            
            <div class="status" id="questionStatus"></div>
        </div>
        
        <!-- Evaluation Section -->
        <div class="evaluation-section" id="evaluationSection">
            <h2>Interview Evaluation</h2>
            <div class="loading" id="evaluationLoading">Evaluating your performance...</div>
            <div class="evaluation-content" id="evaluationContent"></div>
            <button id="restartBtn" style="background:#6c757d; margin-top:20px;">Start New Interview</button>
        </div>
    </div>

    <script>
        let sessionId = null;
        let currentQuestion = 1;
        let difficulty = 'medium';
        let answers = [];
        
        // Upload PDF
        document.getElementById('uploadBtn').addEventListener('click', async () => {
            const fileInput = document.getElementById('pdfFile');
            const difficultySelect = document.getElementById('difficulty');
            const uploadBtn = document.getElementById('uploadBtn');
            const uploadStatus = document.getElementById('uploadStatus');
            
            if (!fileInput.files[0]) {
                showStatus('uploadStatus', 'Please select a PDF file', 'error');
                return;
            }
            
            difficulty = difficultySelect.value;
            uploadBtn.disabled = true;
            uploadBtn.textContent = 'Uploading...';
            
            try {
                const formData = new FormData();
                formData.append('resume', fileInput.files[0]);
                
                const response = await fetch('/load-document', {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.json();
                
                if (data.sessionId) {
                    sessionId = data.sessionId;
                    showStatus('uploadStatus', `Resume uploaded successfully! ${data.totalLines} lines processed.`, 'success');
                    
                    setTimeout(() => {
                        document.getElementById('uploadSection').style.display = 'none';
                        document.getElementById('interviewSection').style.display = 'block';
                        loadQuestion();
                    }, 1500);
                } else {
                    throw new Error(data.error || 'Upload failed');
                }
            } catch (error) {
                showStatus('uploadStatus', 'Error: ' + error.message, 'error');
                uploadBtn.disabled = false;
                uploadBtn.textContent = 'Upload & Start Interview';
            }
        });
        
        // Load Question
        async function loadQuestion() {
            const questionStatus = document.getElementById('questionStatus');
            showStatus('questionStatus', 'Loading question...', 'info');
            
            try {
                const response = await fetch('/conversation', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        sessionId: sessionId,
                        message: '',
                        action: 'ask_question',
                        difficulty: difficulty,
                        questionNumber: currentQuestion
                    })
                });
                
                const data = await response.json();
                
                document.getElementById('questionNumber').textContent = `Question ${currentQuestion}:`;
                document.getElementById('questionText').textContent = data.question;
                document.getElementById('progress').textContent = `Question ${currentQuestion} of 5`;
                document.getElementById('answerInput').value = '';
                hideStatus('questionStatus');
                
            } catch (error) {
                showStatus('questionStatus', 'Error loading question: ' + error.message, 'error');
            }
        }
        
        // Submit Answer
        document.getElementById('submitAnswerBtn').addEventListener('click', async () => {
            const answer = document.getElementById('answerInput').value.trim();
            const questionText = document.getElementById('questionText').textContent;
            
            if (!answer) {
                showStatus('questionStatus', 'Please provide an answer', 'error');
                return;
            }
            
            // Save answer
            answers.push({
                question: questionText,
                answer: answer,
                questionNumber: currentQuestion
            });
            
            showStatus('questionStatus', 'Answer saved!', 'success');
            
            currentQuestion++;
            
            if (currentQuestion <= 5) {
                setTimeout(() => {
                    loadQuestion();
                }, 1000);
            } else {
                // Show finish button
                document.getElementById('submitAnswerBtn').style.display = 'none';
                document.getElementById('finishBtn').style.display = 'block';
                showStatus('questionStatus', 'All questions completed! Click Finish to see your evaluation.', 'success');
            }
        });
        
        // Finish Interview
        document.getElementById('finishBtn').addEventListener('click', async () => {
            document.getElementById('interviewSection').style.display = 'none';
            document.getElementById('evaluationSection').style.display = 'block';
            
            try {
                const response = await fetch('/conversation', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        sessionId: sessionId,
                        message: '',
                        action: 'evaluate',
                        difficulty: difficulty,
                        answers: answers
                    })
                });
                
                const data = await response.json();
                
                document.getElementById('evaluationLoading').style.display = 'none';
                document.getElementById('evaluationContent').textContent = data.evaluation;
                
            } catch (error) {
                document.getElementById('evaluationLoading').textContent = 'Error: ' + error.message;
            }
        });
        
        // Restart Interview
        document.getElementById('restartBtn').addEventListener('click', () => {
            location.reload();
        });
        
        // Helper Functions
        function showStatus(id, message, type) {
            const element = document.getElementById(id);
            element.textContent = message;
            element.className = `status ${type}`;
            element.style.display = 'block';
        }
        
        function hideStatus(id) {
            document.getElementById(id).style.display = 'none';
        }
    </script>
</body>
</html>